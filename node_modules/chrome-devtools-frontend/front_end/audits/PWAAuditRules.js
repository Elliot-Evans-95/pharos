/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

WebInspector.AuditRules.PWARuleManager = function()
{
    this._startedPromise = null;
}

WebInspector.AuditRules.PWARuleManager.prototype = {
    /**
     * @param {!WebInspector.Target} target
     * @param {!WebInspector.Progress} progress
     */
    runAll: function(target, progress)
    {
        if (this._startedPromise)
            return this._startedPromise;

        // TODO: could call progress.worked(); on progress...
        this._startedPromise = window.Lighthouse.runAudits({
            url: target.inspectedURL(),
            flags: {mobile: true}
        }).catch(err => {
            console.error(err);
        });

        return this._startedPromise;
    },

    config: function()
    {
        return window.Lighthouse.config;
    }

}

WebInspector.AuditRules.pwaRuleManager = new WebInspector.AuditRules.PWARuleManager();

/**
 * @constructor
 * @extends {WebInspector.AuditRule}
 */
WebInspector.AuditRules.PWARule = function(stub, title)
{
    this._stub = stub;
    WebInspector.AuditRule.call(this, stub, WebInspector.UIString(stub));
}
WebInspector.AuditRules.PWARule.prototype = {
    /**
     * @override
     * @param {!WebInspector.Target} target
     * @param {!Array.<!WebInspector.NetworkRequest>} requests
     * @param {!WebInspector.AuditRuleResult} result
     * @param {function(?WebInspector.AuditRuleResult)} callback
     * @param {!WebInspector.Progress} progress
     */
    doRun: function(target, requests, result, callback, progress)
    {
        WebInspector.AuditRules.pwaRuleManager.runAll(target, progress).then(lhres => {
            var auditresult = lhres.audits[this._stub];
            var entry = result.addChild(WebInspector.UIString(auditresult.description), true);
            result.addChild(JSON.stringify(auditresult), true);
            result.violationCount = 3;
            callback(result);
        });
    },

    __proto__: WebInspector.AuditRule.prototype
}
